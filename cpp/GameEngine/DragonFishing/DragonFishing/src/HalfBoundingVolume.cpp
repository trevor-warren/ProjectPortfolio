#include "CoreMeshes.h"

#include "MeshData.h"
#include "ObjParser.h"

namespace CoreMeshes
{
	const MeshData& HalfBoundingVolume()
	{
		static MeshData mesh;
		static bool initialized = false;

		if (initialized)
			return mesh;

		initialized = true;

		ObjParser data;

		data.Vertices = {
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -1.000000f,  0.333333f,  0.333333f, 1),
			Vector3( -1.000000f, -0.000000f,  0.333333f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -1.000000f,  0.333333f,  0.333333f, 1),
			Vector3( -1.000000f,  0.000000f,  0.000000f, 1),
			Vector3( -1.000000f, -0.000000f,  0.333333f, 1),
			Vector3(  0.333333f,  0.333333f,  1.000000f, 1),
			Vector3(  0.000000f, -0.000000f,  1.000000f, 1),
			Vector3(  0.333333f, -0.000000f,  1.000000f, 1),
			Vector3(  0.583333f,  0.666667f,  0.583333f, 1),
			Vector3(  0.000000f,  0.750000f,  0.750000f, 1),
			Vector3(  0.333333f,  0.333333f,  1.000000f, 1),
			Vector3(  0.333333f,  0.000000f, -1.000000f, 1),
			Vector3(  0.333333f,  0.333333f, -1.000000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -1.000000f,  0.000000f,  0.000000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.750000f,  0.000000f, 1),
			Vector3(  0.333333f,  1.000000f, -0.333333f, 1),
			Vector3(  0.333333f,  1.000000f,  0.333333f, 1),
			Vector3(  0.000000f,  0.750000f, -0.750000f, 1),
			Vector3(  0.333333f,  1.000000f, -0.333333f, 1),
			Vector3(  0.583333f,  0.666667f, -0.583333f, 1),
			Vector3( -0.333333f, -0.000000f,  1.000000f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -0.583333f,  0.666667f, -0.583333f, 1),
			Vector3(  0.000000f,  0.750000f, -0.750000f, 1),
			Vector3( -0.333333f,  0.333333f, -1.000000f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.333333f,  0.333333f,  1.000000f, 1),
			Vector3(  0.333333f, -0.000000f,  1.000000f, 1),
			Vector3(  0.000000f,  0.000000f, -1.000000f, 1),
			Vector3(  0.333333f,  0.000000f, -1.000000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.583333f,  0.666667f,  0.583333f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.583333f,  0.666667f,  0.583333f, 1),
			Vector3(  1.000000f,  0.333333f,  0.333333f, 1),
			Vector3(  0.750000f,  0.750000f,  0.000000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  1.000000f,  0.000000f,  0.000000f, 1),
			Vector3( -1.000000f,  0.000000f, -0.333333f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.333333f,  0.333333f, -1.000000f, 1),
			Vector3(  0.000000f,  0.750000f, -0.750000f, 1),
			Vector3(  0.333333f,  0.333333f, -1.000000f, 1),
			Vector3(  1.000000f,  0.000000f,  0.000000f, 1),
			Vector3(  1.000000f, -0.000000f,  0.333333f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.583333f,  0.666667f, -0.583333f, 1),
			Vector3(  0.750000f,  0.750000f,  0.000000f, 1),
			Vector3(  1.000000f,  0.333333f, -0.333333f, 1),
			Vector3(  0.333333f,  0.333333f, -1.000000f, 1),
			Vector3(  0.583333f,  0.666667f, -0.583333f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  1.000000f,  0.000000f, -0.333333f, 1),
			Vector3(  1.000000f,  0.000000f,  0.000000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.333333f,  0.333333f, -1.000000f, 1),
			Vector3( -0.333333f,  0.000000f, -1.000000f, 1),
			Vector3(  1.000000f, -0.000000f,  0.333333f, 1),
			Vector3(  1.000000f,  0.333333f,  0.333333f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.333333f,  0.000000f, -1.000000f, 1),
			Vector3(  0.000000f,  0.000000f, -1.000000f, 1),
			Vector3( -0.333333f, -0.000000f,  1.000000f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.000000f, -0.000000f,  1.000000f, 1),
			Vector3(  1.000000f,  0.333333f, -0.333333f, 1),
			Vector3(  1.000000f,  0.000000f,  0.000000f, 1),
			Vector3(  1.000000f,  0.000000f, -0.333333f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.333333f, -0.000000f,  1.000000f, 1),
			Vector3(  0.000000f, -0.000000f,  1.000000f, 1),
			Vector3(  1.000000f,  0.000000f,  0.000000f, 1),
			Vector3(  1.000000f,  0.333333f,  0.333333f, 1),
			Vector3(  1.000000f, -0.000000f,  0.333333f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.000000f, -0.000000f,  1.000000f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.583333f,  0.666667f,  0.583333f, 1),
			Vector3( -1.000000f,  0.333333f,  0.333333f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -1.000000f,  0.333333f,  0.333333f, 1),
			Vector3( -1.000000f,  0.333333f, -0.333333f, 1),
			Vector3( -1.000000f,  0.000000f,  0.000000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  1.000000f,  0.000000f,  0.000000f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.583333f,  0.666667f,  0.583333f, 1),
			Vector3(  0.333333f,  0.333333f,  1.000000f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.000000f, -0.000000f,  1.000000f, 1),
			Vector3( -1.000000f,  0.000000f, -0.333333f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.000000f, -0.000000f,  1.000000f, 1),
			Vector3( -0.333333f,  0.333333f, -1.000000f, 1),
			Vector3(  0.333333f,  0.333333f, -1.000000f, 1),
			Vector3(  0.000000f,  0.000000f, -1.000000f, 1),
			Vector3( -0.333333f, -0.000000f,  1.000000f, 1),
			Vector3( -0.333333f,  0.333333f,  1.000000f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.750000f,  0.750000f,  0.000000f, 1),
			Vector3(  0.333333f,  1.000000f,  0.333333f, 1),
			Vector3(  0.583333f,  0.666667f,  0.583333f, 1),
			Vector3( -1.000000f,  0.333333f, -0.333333f, 1),
			Vector3( -0.583333f,  0.666667f, -0.583333f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -1.000000f, -0.000000f,  0.333333f, 1),
			Vector3( -1.000000f,  0.000000f,  0.000000f, 1),
			Vector3( -1.000000f,  0.000000f,  0.000000f, 1),
			Vector3( -1.000000f,  0.333333f, -0.333333f, 1),
			Vector3( -1.000000f,  0.000000f, -0.333333f, 1),
			Vector3(  0.000000f, -0.000000f,  1.000000f, 1),
			Vector3( -0.333333f,  0.333333f,  1.000000f, 1),
			Vector3( -0.333333f, -0.000000f,  1.000000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  1.000000f,  0.333333f, -0.333333f, 1),
			Vector3(  0.583333f,  0.666667f, -0.583333f, 1),
			Vector3(  0.333333f,  1.000000f, -0.333333f, 1),
			Vector3(  0.750000f,  0.750000f,  0.000000f, 1),
			Vector3(  1.000000f,  0.333333f, -0.333333f, 1),
			Vector3(  1.000000f,  0.333333f,  0.333333f, 1),
			Vector3(  1.000000f,  0.000000f,  0.000000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.333333f,  0.333333f, -1.000000f, 1),
			Vector3( -0.333333f,  1.000000f,  0.333333f, 1),
			Vector3(  0.000000f,  0.750000f,  0.750000f, 1),
			Vector3(  0.333333f,  1.000000f,  0.333333f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  1.000000f,  0.333333f,  0.333333f, 1),
			Vector3(  0.583333f,  0.666667f,  0.583333f, 1),
			Vector3( -1.000000f,  0.000000f,  0.000000f, 1),
			Vector3( -1.000000f,  0.000000f, -0.333333f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.333333f,  0.333333f, -1.000000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.583333f,  0.666667f, -0.583333f, 1),
			Vector3( -1.000000f,  0.000000f, -0.333333f, 1),
			Vector3( -1.000000f,  0.333333f, -0.333333f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.333333f,  0.333333f,  1.000000f, 1),
			Vector3( -0.333333f,  0.333333f,  1.000000f, 1),
			Vector3(  0.000000f, -0.000000f,  1.000000f, 1),
			Vector3( -0.750000f,  0.750000f,  0.000000f, 1),
			Vector3( -0.333333f,  1.000000f, -0.333333f, 1),
			Vector3( -0.583333f,  0.666667f, -0.583333f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -0.333333f,  0.333333f,  1.000000f, 1),
			Vector3( -0.583333f,  0.666667f,  0.583333f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  1.000000f,  0.333333f, -0.333333f, 1),
			Vector3(  0.750000f,  0.750000f,  0.000000f, 1),
			Vector3(  1.000000f,  0.333333f,  0.333333f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  1.000000f,  0.333333f, -0.333333f, 1),
			Vector3(  1.000000f,  0.000000f, -0.333333f, 1),
			Vector3(  0.000000f,  0.000000f, -1.000000f, 1),
			Vector3(  0.333333f,  0.333333f, -1.000000f, 1),
			Vector3(  0.333333f,  0.000000f, -1.000000f, 1),
			Vector3( -1.000000f,  0.333333f,  0.333333f, 1),
			Vector3( -0.750000f,  0.750000f,  0.000000f, 1),
			Vector3( -1.000000f,  0.333333f, -0.333333f, 1),
			Vector3(  0.333333f,  0.000000f, -1.000000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.000000f,  0.000000f, -1.000000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.333333f,  0.333333f,  1.000000f, 1),
			Vector3(  0.000000f,  0.750000f,  0.750000f, 1),
			Vector3( -0.333333f,  0.333333f,  1.000000f, 1),
			Vector3(  0.583333f,  0.666667f, -0.583333f, 1),
			Vector3(  1.000000f,  0.333333f, -0.333333f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.333333f,  0.333333f, -1.000000f, 1),
			Vector3(  0.000000f,  0.000000f, -1.000000f, 1),
			Vector3( -0.333333f,  0.000000f, -1.000000f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -0.583333f,  0.666667f,  0.583333f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -0.333333f,  1.000000f,  0.333333f, 1),
			Vector3( -0.333333f,  1.000000f, -0.333333f, 1),
			Vector3( -0.750000f,  0.750000f,  0.000000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.333333f,  1.000000f, -0.333333f, 1),
			Vector3( -0.333333f,  1.000000f,  0.333333f, 1),
			Vector3(  0.333333f,  1.000000f,  0.333333f, 1),
			Vector3( -0.583333f,  0.666667f,  0.583333f, 1),
			Vector3( -0.750000f,  0.750000f,  0.000000f, 1),
			Vector3( -1.000000f,  0.333333f,  0.333333f, 1),
			Vector3( -0.583333f,  0.666667f,  0.583333f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3( -0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.000000f,  0.750000f,  0.750000f, 1),
			Vector3(  0.583333f,  0.666667f,  0.583333f, 1),
			Vector3(  0.333333f,  1.000000f,  0.333333f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3( -0.333333f,  0.000000f, -1.000000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  1.000000f,  0.000000f, -0.333333f, 1),
			Vector3( -0.333333f,  1.000000f, -0.333333f, 1),
			Vector3(  0.333333f,  1.000000f, -0.333333f, 1),
			Vector3(  0.000000f,  0.750000f, -0.750000f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.583333f,  0.666667f,  0.583333f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.000000f,  0.750000f,  0.750000f, 1),
			Vector3( -0.583333f,  0.666667f,  0.583333f, 1),
			Vector3( -0.333333f,  0.333333f,  1.000000f, 1),
			Vector3( -0.750000f,  0.750000f,  0.000000f, 1),
			Vector3( -0.583333f,  0.666667f, -0.583333f, 1),
			Vector3( -1.000000f,  0.333333f, -0.333333f, 1),
			Vector3( -0.750000f,  0.000000f, -0.750000f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.750000f, -0.000000f,  0.750000f, 1),
			Vector3(  0.000000f,  0.750000f, -0.750000f, 1),
			Vector3(  0.583333f,  0.666667f, -0.583333f, 1),
			Vector3(  0.333333f,  0.333333f, -1.000000f, 1),
			Vector3( -0.583333f,  0.666667f, -0.583333f, 1),
			Vector3( -0.333333f,  1.000000f, -0.333333f, 1),
			Vector3(  0.000000f,  0.750000f, -0.750000f, 1),
			Vector3( -0.333333f,  1.000000f,  0.333333f, 1),
			Vector3( -0.750000f,  0.750000f,  0.000000f, 1),
			Vector3( -0.583333f,  0.666667f,  0.583333f, 1),
			Vector3( -0.333333f,  1.000000f, -0.333333f, 1),
			Vector3( -0.333333f,  1.000000f,  0.333333f, 1),
			Vector3(  0.333333f,  1.000000f, -0.333333f, 1),
			Vector3(  0.000000f,  0.750000f,  0.750000f, 1),
			Vector3( -0.333333f,  1.000000f,  0.333333f, 1),
			Vector3( -0.583333f,  0.666667f,  0.583333f, 1)
		};

		data.Normals = {
			Vector3( -0.8575f,  0.0000f,  0.5145f ),
			Vector3( -0.7071f,  0.0000f, -0.7071f ),
			Vector3(  0.0000f,  0.0000f,  1.0000f ),
			Vector3( -1.0000f,  0.0000f,  0.0000f ),
			Vector3(  0.2928f,  0.6532f,  0.6982f ),
			Vector3(  0.5145f,  0.0000f, -0.8575f ),
			Vector3(  0.0000f, -1.0000f,  0.0000f ),
			Vector3(  0.5145f,  0.8575f,  0.0000f ),
			Vector3(  0.2864f,  0.7030f, -0.6509f ),
			Vector3( -0.2928f,  0.6532f, -0.6982f ),
			Vector3(  0.5145f,  0.0000f,  0.8575f ),
			Vector3(  0.5499f,  0.6285f,  0.5499f ),
			Vector3(  0.6982f,  0.6532f,  0.2928f ),
			Vector3(  0.0000f,  0.5145f, -0.8575f ),
			Vector3(  0.6982f,  0.6532f, -0.2928f ),
			Vector3(  0.6666f,  0.3333f, -0.6666f ),
			Vector3( -0.5145f,  0.0000f, -0.8575f ),
			Vector3(  0.8575f,  0.0000f,  0.5145f ),
			Vector3(  1.0000f,  0.0000f,  0.0000f ),
			Vector3( -0.6666f,  0.3333f,  0.6666f ),
			Vector3(  0.6666f,  0.3333f,  0.6666f ),
			Vector3(  0.0000f,  0.0000f, -1.0000f ),
			Vector3( -0.5145f,  0.0000f,  0.8575f ),
			Vector3(  0.6509f,  0.7030f,  0.2864f ),
			Vector3( -0.6666f,  0.3333f, -0.6666f ),
			Vector3(  0.9045f,  0.3015f, -0.3015f ),
			Vector3(  0.6509f,  0.7030f, -0.2864f ),
			Vector3(  0.0000f,  0.8575f,  0.5145f ),
			Vector3( -0.8575f,  0.0000f, -0.5145f ),
			Vector3( -0.6509f,  0.7030f, -0.2864f ),
			Vector3(  0.8575f,  0.5145f,  0.0000f ),
			Vector3(  0.8575f,  0.0000f, -0.5145f ),
			Vector3( -0.8575f,  0.5145f,  0.0000f ),
			Vector3(  0.0000f,  0.5145f,  0.8575f ),
			Vector3( -0.5499f,  0.6285f,  0.5499f ),
			Vector3( -0.5145f,  0.8575f,  0.0000f ),
			Vector3(  0.0000f,  1.0000f,  0.0000f ),
			Vector3( -0.6982f,  0.6532f,  0.2928f ),
			Vector3(  0.2864f,  0.7030f,  0.6509f ),
			Vector3(  0.0000f,  0.8575f, -0.5145f ),
			Vector3( -0.2928f,  0.6532f,  0.6982f ),
			Vector3( -0.6982f,  0.6532f, -0.2928f ),
			Vector3(  0.2928f,  0.6532f, -0.6982f ),
			Vector3( -0.2864f,  0.7030f, -0.6509f ),
			Vector3( -0.6509f,  0.7030f,  0.2864f ),
			Vector3( -0.2864f,  0.7030f,  0.6509f )
		};

		data.Colors = { { 1, 1, 1, 1 } };

		data.UVs = {
			Vector3(0, 0)
		};

		data.Faces = {
			Face{ Vertex(   0, 0,  0, 0), Vertex(    1, 0,  0, 0), Vertex(   2, 0,  0, 0) },
			Face{ Vertex(   3, 0,  1, 0), Vertex(    4, 0,  1, 0), Vertex(   5, 0,  1, 0) },
			Face{ Vertex(   6, 0,  3, 0), Vertex(    7, 0,  3, 0), Vertex(   8, 0,  3, 0) },
			Face{ Vertex(   9, 0,  2, 0), Vertex(   10, 0,  2, 0), Vertex(  11, 0,  2, 0) },
			Face{ Vertex(  12, 0,  4, 0), Vertex(   13, 0,  4, 0), Vertex(  14, 0,  4, 0) },
			Face{ Vertex(  15, 0,  5, 0), Vertex(   16, 0,  5, 0), Vertex(  17, 0,  5, 0) },
			Face{ Vertex(  18, 0,  6, 0), Vertex(   19, 0,  6, 0), Vertex(  20, 0,  6, 0) },
			Face{ Vertex(  21, 0,  7, 0), Vertex(   22, 0,  7, 0), Vertex(  23, 0,  7, 0) },
			Face{ Vertex(  24, 0,  8, 0), Vertex(   25, 0,  8, 0), Vertex(  26, 0,  8, 0) },
			Face{ Vertex(  27, 0,  2, 0), Vertex(   28, 0,  2, 0), Vertex(  29, 0,  2, 0) },
			Face{ Vertex(  30, 0,  9, 0), Vertex(   31, 0,  9, 0), Vertex(  32, 0,  9, 0) },
			Face{ Vertex(  33, 0, 10, 0), Vertex(   34, 0, 10, 0), Vertex(  35, 0, 10, 0) },
			Face{ Vertex(  36, 0,  6, 0), Vertex(   37, 0,  6, 0), Vertex(  38, 0,  6, 0) },
			Face{ Vertex(  39, 0,  2, 0), Vertex(   40, 0,  2, 0), Vertex(  41, 0,  2, 0) },
			Face{ Vertex(  42, 0, 11, 0), Vertex(   43, 0, 11, 0), Vertex(  44, 0, 11, 0) },
			Face{ Vertex(  45, 0, 12, 0), Vertex(   46, 0, 12, 0), Vertex(  47, 0, 12, 0) },
			Face{ Vertex(  48, 0,  6, 0), Vertex(   49, 0,  6, 0), Vertex(  50, 0,  6, 0) },
			Face{ Vertex(  51, 0,  2, 0), Vertex(   52, 0,  2, 0), Vertex(  53, 0,  2, 0) },
			Face{ Vertex(  54, 0, 13, 0), Vertex(   55, 0, 13, 0), Vertex(  56, 0, 13, 0) },
			Face{ Vertex(  57, 0,  6, 0), Vertex(   58, 0,  6, 0), Vertex(  59, 0,  6, 0) },
			Face{ Vertex(  60, 0, 14, 0), Vertex(   61, 0, 14, 0), Vertex(  62, 0, 14, 0) },
			Face{ Vertex(  63, 0, 15, 0), Vertex(   64, 0, 15, 0), Vertex(  65, 0, 15, 0) },
			Face{ Vertex(  66, 0,  6, 0), Vertex(   67, 0,  6, 0), Vertex(  68, 0,  6, 0) },
			Face{ Vertex(  69, 0, 16, 0), Vertex(   70, 0, 16, 0), Vertex(  71, 0, 16, 0) },
			Face{ Vertex(  72, 0, 17, 0), Vertex(   73, 0, 17, 0), Vertex(  74, 0, 17, 0) },
			Face{ Vertex(  75, 0,  6, 0), Vertex(   76, 0,  6, 0), Vertex(  77, 0,  6, 0) },
			Face{ Vertex(  78, 0,  6, 0), Vertex(   79, 0,  6, 0), Vertex(  80, 0,  6, 0) },
			Face{ Vertex(  81, 0, 18, 0), Vertex(   82, 0, 18, 0), Vertex(  83, 0, 18, 0) },
			Face{ Vertex(  84, 0,  2, 0), Vertex(   85, 0,  2, 0), Vertex(  86, 0,  2, 0) },
			Face{ Vertex(  87, 0,  6, 0), Vertex(   88, 0,  6, 0), Vertex(  89, 0,  6, 0) },
			Face{ Vertex(  90, 0, 18, 0), Vertex(   91, 0, 18, 0), Vertex(  92, 0, 18, 0) },
			Face{ Vertex(  93, 0,  2, 0), Vertex(   94, 0,  2, 0), Vertex(  95, 0,  2, 0) },
			Face{ Vertex(  96, 0,  6, 0), Vertex(   97, 0,  6, 0), Vertex(  98, 0,  6, 0) },
			Face{ Vertex(  99, 0, 19, 0), Vertex(  100, 0, 19, 0), Vertex( 101, 0, 19, 0) },
			Face{ Vertex( 102, 0,  3, 0), Vertex(  103, 0,  3, 0), Vertex( 104, 0,  3, 0) },
			Face{ Vertex( 105, 0,  6, 0), Vertex(  106, 0,  6, 0), Vertex( 107, 0,  6, 0) },
			Face{ Vertex( 108, 0, 20, 0), Vertex(  109, 0, 20, 0), Vertex( 110, 0, 20, 0) },
			Face{ Vertex( 111, 0,  6, 0), Vertex(  112, 0,  6, 0), Vertex( 113, 0,  6, 0) },
			Face{ Vertex( 114, 0,  2, 0), Vertex(  115, 0,  2, 0), Vertex( 116, 0,  2, 0) },
			Face{ Vertex( 117, 0,  2, 0), Vertex(  118, 0,  2, 0), Vertex( 119, 0,  2, 0) },
			Face{ Vertex( 120, 0, 21, 0), Vertex(  121, 0, 21, 0), Vertex( 122, 0, 21, 0) },
			Face{ Vertex( 123, 0, 22, 0), Vertex(  124, 0, 22, 0), Vertex( 125, 0, 22, 0) },
			Face{ Vertex( 126, 0, 23, 0), Vertex(  127, 0, 23, 0), Vertex( 128, 0, 23, 0) },
			Face{ Vertex( 129, 0, 24, 0), Vertex(  130, 0, 24, 0), Vertex( 131, 0, 24, 0) },
			Face{ Vertex( 132, 0,  6, 0), Vertex(  133, 0,  6, 0), Vertex( 134, 0,  6, 0) },
			Face{ Vertex( 135, 0,  3, 0), Vertex(  136, 0,  3, 0), Vertex( 137, 0,  3, 0) },
			Face{ Vertex( 138, 0,  2, 0), Vertex(  139, 0,  2, 0), Vertex( 140, 0,  2, 0) },
			Face{ Vertex( 141, 0,  2, 0), Vertex(  142, 0,  2, 0), Vertex( 143, 0,  2, 0) },
			Face{ Vertex( 144, 0, 26, 0), Vertex(  145, 0, 26, 0), Vertex( 146, 0, 26, 0) },
			Face{ Vertex( 147, 0, 18, 0), Vertex(  148, 0, 18, 0), Vertex( 149, 0, 18, 0) },
			Face{ Vertex( 150, 0,  2, 0), Vertex(  151, 0,  2, 0), Vertex( 152, 0,  2, 0) },
			Face{ Vertex( 153, 0, 27, 0), Vertex(  154, 0, 27, 0), Vertex( 155, 0, 27, 0) },
			Face{ Vertex( 156, 0, 20, 0), Vertex(  157, 0, 20, 0), Vertex( 158, 0, 20, 0) },
			Face{ Vertex( 159, 0,  6, 0), Vertex(  160, 0,  6, 0), Vertex( 161, 0,  6, 0) },
			Face{ Vertex( 162, 0, 24, 0), Vertex(  163, 0, 24, 0), Vertex( 164, 0, 24, 0) },
			Face{ Vertex( 165, 0, 28, 0), Vertex(  166, 0, 28, 0), Vertex( 167, 0, 28, 0) },
			Face{ Vertex( 168, 0,  2, 0), Vertex(  169, 0,  2, 0), Vertex( 170, 0,  2, 0) },
			Face{ Vertex( 171, 0, 29, 0), Vertex(  172, 0, 29, 0), Vertex( 173, 0, 29, 0) },
			Face{ Vertex( 174, 0, 19, 0), Vertex(  175, 0, 19, 0), Vertex( 176, 0, 19, 0) },
			Face{ Vertex( 177, 0,  2, 0), Vertex(  178, 0,  2, 0), Vertex( 179, 0,  2, 0) },
			Face{ Vertex( 180, 0, 30, 0), Vertex(  181, 0, 30, 0), Vertex( 182, 0, 30, 0) },
			Face{ Vertex( 183, 0, 31, 0), Vertex(  184, 0, 31, 0), Vertex( 185, 0, 31, 0) },
			Face{ Vertex( 186, 0, 21, 0), Vertex(  187, 0, 21, 0), Vertex( 188, 0, 21, 0) },
			Face{ Vertex( 189, 0, 32, 0), Vertex(  190, 0, 32, 0), Vertex( 191, 0, 32, 0) },
			Face{ Vertex( 192, 0,  2, 0), Vertex(  193, 0,  2, 0), Vertex( 194, 0,  2, 0) },
			Face{ Vertex( 195, 0,  6, 0), Vertex(  196, 0,  6, 0), Vertex( 197, 0,  6, 0) },
			Face{ Vertex( 198, 0, 33, 0), Vertex(  199, 0, 33, 0), Vertex( 200, 0, 33, 0) },
			Face{ Vertex( 201, 0, 15, 0), Vertex(  202, 0, 15, 0), Vertex( 203, 0, 15, 0) },
			Face{ Vertex( 204, 0, 21, 0), Vertex(  205, 0, 21, 0), Vertex( 206, 0, 21, 0) },
			Face{ Vertex( 207, 0,  2, 0), Vertex(  208, 0,  2, 0), Vertex( 209, 0,  2, 0) },
			Face{ Vertex( 210, 0, 35, 0), Vertex(  211, 0, 35, 0), Vertex( 212, 0, 35, 0) },
			Face{ Vertex( 213, 0,  2, 0), Vertex(  214, 0,  2, 0), Vertex( 215, 0,  2, 0) },
			Face{ Vertex( 216, 0, 36, 0), Vertex(  217, 0, 36, 0), Vertex( 218, 0, 36, 0) },
			Face{ Vertex( 219, 0, 37, 0), Vertex(  220, 0, 37, 0), Vertex( 221, 0, 37, 0) },
			Face{ Vertex( 222, 0, 34, 0), Vertex(  223, 0, 34, 0), Vertex( 224, 0, 34, 0) },
			Face{ Vertex( 225, 0, 38, 0), Vertex(  226, 0, 38, 0), Vertex( 227, 0, 38, 0) },
			Face{ Vertex( 228, 0,  2, 0), Vertex(  229, 0,  2, 0), Vertex( 230, 0,  2, 0) },
			Face{ Vertex( 231, 0,  2, 0), Vertex(  232, 0,  2, 0), Vertex( 233, 0,  2, 0) },
			Face{ Vertex( 234, 0, 39, 0), Vertex(  235, 0, 39, 0), Vertex( 236, 0, 39, 0) },
			Face{ Vertex( 237, 0,  2, 0), Vertex(  238, 0,  2, 0), Vertex( 239, 0,  2, 0) },
			Face{ Vertex( 240, 0, 40, 0), Vertex(  241, 0, 40, 0), Vertex( 242, 0, 40, 0) },
			Face{ Vertex( 243, 0, 41, 0), Vertex(  244, 0, 41, 0), Vertex( 245, 0, 41, 0) },
			Face{ Vertex( 246, 0,  1, 0), Vertex(  247, 0,  1, 0), Vertex( 248, 0,  1, 0) },
			Face{ Vertex( 249, 0, 42, 0), Vertex(  250, 0, 42, 0), Vertex( 251, 0, 42, 0) },
			Face{ Vertex( 252, 0, 43, 0), Vertex(  253, 0, 43, 0), Vertex( 254, 0, 43, 0) },
			Face{ Vertex( 255, 0, 44, 0), Vertex(  256, 0, 44, 0), Vertex( 257, 0, 44, 0) },
			Face{ Vertex( 258, 0, 36, 0), Vertex(  259, 0, 36, 0), Vertex( 260, 0, 36, 0) },
			Face{ Vertex( 261, 0, 45, 0), Vertex(  262, 0, 45, 0), Vertex( 263, 0, 45, 0) }
		};

		mesh = MeshData(&data, Enum::VertexMode::Seperate);

		return mesh;
	}
}